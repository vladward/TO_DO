{"version":3,"sources":["api/todolists-api.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/TodoList/Task/Task.tsx","features/TodoList/Todolist.tsx","App/App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","updateTask","todoId","domainModel","dispatch","getState","task","tasks","find","t","description","status","priority","startDate","deadline","then","res","data","resultCode","type","updateTaskAC","catch","err","console","log","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","App","todolists","useSelector","state","removeTaskAC","item","addTaskAC","addTaskTC","changeStatus","newTitle","removeTodolistTC","changeTodolistTitleAC","updateTodolistTitle","addTodolist","todolist","createTodolist","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAmDYA,EAMAC,E,sEAvDNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,WALvGF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAA2EF,GAAM,CAACF,WAXpFF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAAgGI,EAAhG,UAAoH,CAACL,WApBvHF,EAAe,SAsBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,K,SAiBlIjB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KCtDZ,IAAMiB,EAA0C,G,QCoB1CA,EAA+B,GAyGxBC,EAAa,SAACC,EAAgBJ,EAAgBK,GAAjC,OAA4E,SAACC,EAAiCC,GACpI,IACMC,EADWD,IAAWE,MAAML,GACZM,MAAK,SAAAC,GAAC,OAAIA,EAAEf,KAAOI,KACrCQ,GACAhB,EAAwBY,EAAQJ,EAAhC,aACIN,MAAOc,EAAKd,MACZkB,YAAaJ,EAAKI,YAClBC,OAAQL,EAAKK,OACbC,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBC,SAAUR,EAAKQ,UACZX,IAEFY,MAAK,SAAAC,GAAG,OAA4B,IAAxBA,EAAIC,KAAKC,YAAoBd,EA3C1B,SAACN,EAAgBC,EAAkCF,GAC3E,MAAO,CAACsB,KAAM,cAAepB,QAAOF,aAAYC,UA0CWsB,CAAatB,EAAQK,EAAaD,OACpFmB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,Q,yHCtInCG,EAAcC,IAAMC,MAAK,SAAUC,GAC5C,MAA0BC,mBAAS,IAAnC,mBAAOrC,EAAP,KAAcsC,EAAd,KACA,EAA0BD,mBAAwB,MAAlD,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EAAU,WACS,KAAjBzC,EAAM0C,QACNN,EAAMK,QAAQzC,GACdsC,EAAS,KAETE,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAO7C,EACP8C,SAjBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCpCCC,EAAevB,IAAMC,MAAK,SAAUC,GAC7C,MAA8BC,oBAAS,GAAvC,mBAAKqB,EAAL,KAAeC,EAAf,KACA,EAAwBtB,mBAASD,EAAMS,OAAvC,mBAAK7C,EAAL,KAAYsC,EAAZ,KAcA,OAAOoB,EACD,cAACf,EAAA,EAAD,CAAWE,MAAO7C,EAAO8C,SALX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QAIyBe,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZvB,EAAMU,SAAS9C,MAQb,sBAAM8D,cAda,WACrBH,GAAY,GACZrB,EAASF,EAAMS,QAYb,SAAwCT,EAAMS,W,kBCb3CkB,EAAO7B,IAAMC,MAAK,SAACC,GAC5B,IAAM4B,EAAiBC,uBAAY,WAC/B7B,EAAM8B,WAAW9B,EAAMtB,KAAKZ,GAAIkC,EAAM/B,cACvC,CAAC+B,EAAMtB,KAAKZ,GAAIkC,EAAM/B,aAEnB8D,EAAkBF,uBAAY,SAAClB,GACjC,IAAIqB,EAAiBrB,EAAEC,cAAcqB,QACrCjC,EAAMkC,iBAAiBlC,EAAMtB,KAAKZ,GAAIkE,EAAiB9E,EAAaiF,UAAYjF,EAAakF,IAAKpC,EAAM/B,cACzG,CAAC+B,EAAMtB,KAAKZ,GAAIkC,EAAM/B,aAEnBoE,EAAuBR,uBAAY,SAACS,GACtCtC,EAAMuC,gBAAgBvC,EAAMtB,KAAKZ,GAAIwE,EAAUtC,EAAM/B,cACtD,CAAC+B,EAAMtB,KAAKZ,GAAIkC,EAAM/B,aAEzB,OAAO,sBAAyBuE,UAAWxC,EAAMtB,KAAKK,SAAW7B,EAAaiF,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAASjC,EAAMtB,KAAKK,SAAW7B,EAAaiF,UAC5CjB,MAAM,UACNR,SAAUqB,IAGd,cAACV,EAAD,CAAcZ,MAAOT,EAAMtB,KAAKd,MAAO8C,SAAU2B,IACjD,cAACpB,EAAA,EAAD,CAAYE,QAASS,EAArB,SACI,cAACc,EAAA,EAAD,QATS1C,EAAMtB,KAAKZ,OCAnB6E,EAAW7C,IAAMC,MAAK,SAAUC,GACzC,IAAMxB,EAAWoE,cAEjBC,qBAAU,WJ6EU,IAACvE,EI5EjBE,GJ4EiBF,EI5EC0B,EAAMlC,GJ4EY,SAACU,GACzCd,EAAsBY,GACjBa,MAAK,SAAAC,GAAG,OAAKA,EAAIC,KAAKc,OAAS3B,EARd,SAACF,EAAgBK,GACvC,MAAO,CAACY,KAAM,YAAajB,SAAQK,SAOUmE,CAAWxE,EAAQc,EAAIC,KAAK0D,WACpEtD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,WI9ErC,IAEH,IAAMsD,EAAUnB,uBAAY,SAACjE,GACzBoC,EAAMgD,QAAQpF,EAAOoC,EAAMlC,MAC5B,CAACkC,EAAMgD,QAAShD,EAAMlC,KAKnBmF,EAAsBpB,uBAAY,SAACjE,GACrCoC,EAAMiD,oBAAoBjD,EAAMlC,GAAIF,KACrC,CAACoC,EAAMlC,GAAIkC,EAAMiD,sBAEdC,EAAoBrB,uBAAY,kBAAM7B,EAAMmD,aAAa,MAAOnD,EAAMlC,MAAK,CAACkC,EAAMlC,GAAIkC,EAAMmD,eAC5FC,EAAuBvB,uBAAY,kBAAM7B,EAAMmD,aAAa,SAAUnD,EAAMlC,MAAK,CAACkC,EAAMlC,GAAIkC,EAAMmD,eAClGE,EAA0BxB,uBAAY,kBAAM7B,EAAMmD,aAAa,YAAanD,EAAMlC,MAAK,CAACkC,EAAMlC,GAAIkC,EAAMmD,eAG1GG,EAAmBtD,EAAMrB,MAS7B,MAPqB,WAAjBqB,EAAMuD,SACND,EAAmBtD,EAAMrB,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAEE,SAAW7B,EAAakF,QAEpD,cAAjBpC,EAAMuD,SACND,EAAmBtD,EAAMrB,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAEE,SAAW7B,EAAaiF,cAGlE,gCACH,+BAAI,cAACd,EAAD,CAAcZ,MAAOT,EAAMpC,MAAO8C,SAAUuC,IAC5C,cAAChC,EAAA,EAAD,CAAYE,QAvBG,WACnBnB,EAAMwD,eAAexD,EAAMlC,KAsBvB,SACI,cAAC4E,EAAA,EAAD,SAGR,cAAC7C,EAAD,CAAaQ,QAAS2C,IACtB,8BAEQM,EAAiBG,KAAI,SAAA5E,GAAC,OAAI,cAAC8C,EAAD,CAAiBjD,KAAMG,EAAGZ,WAAY+B,EAAMlC,GACtCgE,WAAY9B,EAAM8B,WAClBS,gBAAiBvC,EAAMuC,gBACvBL,iBAAkBlC,EAAMkC,kBAHnBrD,EAAEf,SAO/C,sBAAK4F,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQpD,QAA0B,QAAjBR,EAAMuD,OAAmB,WAAa,OAC/CpC,QAAS+B,EACThC,MAAO,UAFf,iBAKA,cAAC0C,EAAA,EAAD,CAAQpD,QAA0B,WAAjBR,EAAMuD,OAAsB,WAAa,OAClDpC,QAASiC,EACTlC,MAAO,UAFf,oBAIA,cAAC0C,EAAA,EAAD,CAAQpD,QAA0B,cAAjBR,EAAMuD,OAAyB,WAAa,OACrDpC,QAASkC,EACTnC,MAAO,YAFf,gCC2BG2C,MAxFf,WACI,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFnF,EAAQoF,aAA8C,SAAAC,GAAK,OAAIA,EAAMrF,SACrEH,EAAWoE,cAEjBC,qBAAU,WACNrE,GN2B0B,SAACA,GAC3Bd,IACKyB,MAAK,SAAAC,GAAG,OAAIZ,EAnBd,CAACe,KAAM,gBAAiBuE,UAmBc1E,EAAIC,UACxCI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,wBAAyBF,WM7BxD,IAEH,IAAMoC,EAAaD,uBAAY,SAAU/D,EAAYG,GL+E7B,IAACK,EAAgBJ,EK9ErCM,GL8EqBF,EK9ECL,EL8EeC,EK9EHJ,EL8EsB,SAACU,GAC7Dd,EAAwBY,EAAQJ,GAC3BiB,MAAK,SAAAC,GAAG,OAA4B,IAAxBA,EAAIC,KAAKC,YAAoBd,EArBtB,SAACN,EAAgBD,GACzC,MAAO,CAACsB,KAAM,cAAerB,OAAQA,EAAQD,WAAYA,GAoBFgG,CAAa/F,EAAQI,OACvEmB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,WKhFrC,IAEGsD,EAAUnB,uBAAY,SAAUjE,EAAeK,GACjDO,EL+EiB,SAACP,EAAoBL,GAArB,OAAuC,SAACY,GAC7Dd,EAAwBO,EAAYL,GAC/BuB,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIC,KAAKC,WAAkB,CAC3B,IAAIZ,EAAOU,EAAIC,KAAKA,KAAK6E,KACzB1F,EA1BS,SAACE,GACtB,MAAO,CAACa,KAAM,WAAYb,QAyBLyF,CAAUzF,QAG1Be,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,SAAUF,OKvF3B0E,CAAUnG,EAAYL,MAChC,IAEGyG,EAAexC,uBAAY,SAAU/D,EAAYiB,EAAsBd,GACzEO,EAASH,EAAWJ,EAAYH,EAAI,CAACiB,OAAQA,OAC9C,IAEGwD,EAAkBV,uBAAY,SAAU/D,EAAYwG,EAAkBrG,GACxEO,EAASH,EAAWJ,EAAYH,EAAI,CAACF,MAAO0G,OAC7C,IAEGnB,EAAetB,uBAAY,SAAUpB,EAAyBxC,GAChEO,ENEG,CAACe,KAAM,yBAA0BzB,GMFJG,ENEYsF,OMFA9C,MAC7C,IAEG+C,EAAiB3B,uBAAY,SAAU/D,GACzCU,ENQwB,SAACV,GAAD,OAAgB,SAACU,GACzCd,EAA4BI,GACvBqB,MAAK,SAAAC,GAAG,OAA4B,IAAxBA,EAAIC,KAAKC,YAAoBd,EArB3C,CAACe,KAAM,kBAAmBtB,WAqB2CH,OACnE2B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,8BAA+BF,OMXpD6E,CAAiBzG,MAC3B,IAEGmF,EAAsBpB,uBAAY,SAAU/D,EAAYF,GAC1DY,ENS2B,SAACV,EAAYF,GAAb,OAA+B,SAACY,GAC3Dd,EAA4BI,EAAIF,GAC3BuB,MAAK,SAAAC,GAAG,OAA4B,IAAxBA,EAAIC,KAAKC,YAAoBd,EArBjB,SAACV,EAAYF,GAC9C,MAAO,CAAC2B,KAAM,wBAAyBzB,GAAIA,EAAIF,MAAOA,GAoBK4G,CAAsB1G,EAAIF,OAC5E6B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,2BAA4BF,OMZjD+E,CAAoB3G,EAAIF,MAClC,IAEG8G,EAAc7C,uBAAY,SAACjE,GAC7BY,ENUsB,SAACZ,GAAD,OAAmB,SAACY,GAC1Cd,EAA4BE,GACvBuB,MAAK,SAAAC,GAAG,OAA4B,IAAxBA,EAAIC,KAAKC,YAAoBd,EA5B3C,CAACe,KAAM,eAAgBoF,SA4B2CvF,EAAIC,KAAKA,KAAK6E,UAC9EzE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,sBAAuBF,OMb5CkF,CAAehH,MACzB,CAACY,IAEJ,OACI,sBAAKgE,UAAU,MAAf,UACI,cAACqC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAC9D,EAAA,EAAD,CAAY+D,KAAK,QAAQ9D,MAAM,UAAU,aAAW,OAApD,SACI,cAAC+D,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAY1E,QAAQ,KAApB,kBAGA,cAACoD,EAAA,EAAD,CAAQ1C,MAAM,UAAd,wBAGR,eAACiE,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC5B,MAAO,CAAC6B,QAAS,QAAjC,SACI,cAAC1F,EAAD,CAAaQ,QAASqE,MAE1B,cAACW,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ1B,EAAUL,KAAI,SAAAgC,GACV,IAAIC,EAAmB/G,EAAM8G,EAAG3H,IAEhC,OAAO,cAACuH,EAAA,EAAD,CAAMnB,MAAI,EAAV,SACH,cAACyB,EAAA,EAAD,CAAOjC,MAAO,CAAC6B,QAAS,QAAxB,SACI,cAAC5C,EAAD,CACI7E,GAAI2H,EAAG3H,GACPF,MAAO6H,EAAG7H,MACVe,MAAO+G,EACP5D,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTd,iBAAkBmC,EAClBd,OAAQkC,EAAGlC,OACXC,eAAgBA,EAChBjB,gBAAiBA,EACjBU,oBAAqBA,OAbVwC,EAAG3H,gB,gBClFhD8H,EAAcC,YAAgB,CAChC/B,UPe4B,WAAsG,IAArGE,EAAoG,uDAAjE5F,EAAc0H,EAAmD,uCACjI,OAAQA,EAAOvG,MACX,IAAK,kBACD,OAAOyE,EAAMT,QAAO,SAAAkC,GAAE,OAAIA,EAAG3H,KAAOgI,EAAO7H,cAC/C,IAAK,eACD,MAAM,CAAN,2BAAY6H,EAAOnB,UAAnB,IAA6BpB,OAAQ,SAArC,mBAAgDS,IACpD,IAAK,wBACD,OAAOA,EAAMP,KAAI,SAAAgC,GAAE,OAAIA,EAAG3H,KAAMgI,EAAOhI,GAAhB,2BAAyB2H,GAAzB,IAA6B7H,MAAOkI,EAAOlI,QAAS6H,KAC/E,IAAK,yBACD,OAAOzB,EAAMP,KAAI,SAAAgC,GAAE,OAAIA,EAAG3H,KAAMgI,EAAOhI,GAAhB,2BAAyB2H,GAAzB,IAA6BlC,OAAQuC,EAAOvC,SAAUkC,KACjF,IAAK,gBACD,OAAOK,EAAOhC,UAAUL,KAAI,SAAAgC,GAAE,kCAASA,GAAT,IAAalC,OAAQ,WACvD,QACI,OAAOS,IO3BfrF,MNoCwB,WAAgF,IAA/EqF,EAA8E,uDAAtD5F,EAAc0H,EAAwC,uCACvG,OAAQA,EAAOvG,MACX,IAAK,cACD,OAAO,2BACAyE,GADP,kBAEK8B,EAAO7H,WAAa+F,EAAM8B,EAAO7H,YAAYsF,QAAO,SAAA1E,GAAC,OAAIA,EAAEf,KAAOgI,EAAO5H,YAElF,IAAK,WACD,OAAO,2BACA8F,GADP,kBAEK8B,EAAOpH,KAAKqH,WAFjB,CAE+BD,EAAOpH,MAFtC,mBAE+CsF,EAAM8B,EAAOpH,KAAKqH,gBAErE,IAAK,cACD,OAAO,2BACA/B,GADP,kBAEK8B,EAAO7H,WAAa+F,EAAM8B,EAAO7H,YAAYwF,KAAI,SAAA5E,GAAC,OAAIA,EAAEf,KAAOgI,EAAO5H,OAAhB,2BAA6BW,GAAMiH,EAAO3H,OAASU,OAElH,IAAK,eACD,OAAO,2BACAmF,GADP,kBAEK8B,EAAOnB,SAAS7G,GAAK,KAE9B,IAAK,kBACD,OAAO,2BACAkG,GADP,kBAEK8B,EAAO7H,WAAa+F,EAAM8B,EAAO7H,YAAYsF,QAAO,SAAAkC,GAAE,OAAIA,EAAG3H,KAAOgI,EAAO7H,gBAMpF,IAAK,gBACD,IAAM+H,EAAS,eAAOhC,GAItB,OAHA8B,EAAOhC,UAAUmC,SAAQ,SAAAR,GACrBO,EAAUP,EAAG3H,IAAM,MAEhBkI,EAEX,IAAK,YACD,OAAO,2BACAhC,GADP,kBAEK8B,EAAOxH,OAASwH,EAAOnH,QAGhC,QACI,OAAOqF,MM/ENkC,EAAQC,YAAYP,EAAaQ,YAAgBC,MAI9DC,OAAOJ,MAAQA,ECNfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,W","file":"static/js/main.f0bd37ba.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd2b9a4d9-cefb-4fec-a892-1707fa6823da'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\n//types\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType }\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id ===action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id ===action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', todolistId} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const\r\n}\r\n\r\n\r\n//thunks\r\nexport const setTodolists = () => (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.getTodolists()\r\n            .then(res => dispatch(setTodolistsAC(res.data)))\r\n            .catch(err => console.log('Error adding a to-do ', err))\r\n}\r\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then(res => res.data.resultCode === 0 && dispatch(removeTodolistAC(id)))\r\n            .catch(err => console.log('To-do has not been removed ', err))\r\n}\r\nexport const updateTodolistTitle = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(res => res.data.resultCode === 0 && dispatch(changeTodolistTitleAC(id, title)))\r\n            .catch(err => console.log('To-do title not updated ', err))\r\n}\r\nexport const createTodolist = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => res.data.resultCode === 0 && dispatch(addTodolistAC(res.data.data.item)))\r\n            .catch(err => console.log(\"To-do wasn't added \", err))\r\n\r\n}","import {TasksStateType} from '../App/App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionsType = ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(tl => tl.id !== action.todolistId)\r\n            }\r\n            // let copyState = {...state}\r\n            // delete copyState[action.todolistId];\r\n            // return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todoId]: action.tasks\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const}\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {type: 'UPDATE-TASK', model, todolistId, taskId} as const\r\n}\r\nexport const setTasksAC = (todoId: string, tasks: Array<TaskType>) => {\r\n    return {type: 'SET-TASKS', todoId, tasks} as const\r\n}\r\n\r\n\r\n//thunks\r\nexport const setTasks = (todoId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todoId)\r\n        .then(res => !res.data.error && dispatch(setTasksAC(todoId, res.data.items)))\r\n        .catch(err => console.log('error ', err))\r\n}\r\nexport const removeTaskTC = (todoId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todoId, taskId)\r\n        .then(res => res.data.resultCode === 0 && dispatch(removeTaskAC(taskId, todoId)))\r\n        .catch(err => console.log('error ', err))\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            }\r\n        })\r\n        .catch(err => console.log('error ', err))\r\n}\r\n\r\nexport const updateTask = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const allTasks = getState().tasks[todoId]\r\n    const task = allTasks.find(t => t.id === taskId)\r\n    if (task) {\r\n        todolistsAPI.updateTask(todoId, taskId, {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        })\r\n            .then(res => res.data.resultCode === 0 && dispatch(updateTaskAC(taskId, domainModel, todoId)))\r\n            .catch(err => console.log('error ', err))\r\n    }\r\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../../state/todolists-reducer\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {setTasks} from \"../../state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasks(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    createTodolist,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    setTodolists,\r\n    TodolistDomainType,\r\n    updateTodolistTitle\r\n} from '../state/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, updateTask} from '../state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TaskStatuses, TaskType} from '../api/todolists-api'\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from '../features/TodoList/Todolist';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTask(todolistId, id, {status: status}))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTask(todolistId, id, {title: newTitle}))\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTitle(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolist(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}