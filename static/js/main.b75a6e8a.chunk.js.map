{"version":3,"sources":["Components/AddItemForm/AddItemForm.tsx","state/todolistsReducer.ts","Components/EditableSpan/EditableSpan.tsx","state/tasksReducer.ts","Task/Task.tsx","Components/TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","title","setTitle","error","setError","console","log","AddItem","trim","addItem","TextField","label","initValue","size","variant","helperText","onChange","e","currentTarget","value","onKeyPress","key","IconButton","aria-label","onClick","style","color","disabled","AddBox","fontSize","initialState","ChangeTodolistFilterAC","filter","todolistId","type","EditableSpan","setNewTitle","editMode","setEditMode","spanTitle","setSpanTitle","offEditMode","onBlur","autoFocus","width","onDoubleClick","Task","taskId","dispatch","useDispatch","task","useSelector","state","tasks","t","id","removeTaskById","useCallback","todoListID","removeTaskAC","onChangeTaskStatus","status","changeTaskStatusAC","checked","changeTitle","newTitle","changeTaskTitleAC","ListItem","className","isDone","disableGutters","padding","display","justifyContent","maxWidth","divider","Checkbox","edge","TodoList","todolist","todolists","todo","createTask","addTaskAC","changeTodoListTitle","ChangeTodolistTitleAC","filteredTask","Typography","align","RemoveTodolistAC","HighlightOff","map","Button","App","todoLists","addTodoList","v1","AddTodolistAC","todoListComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","Menu","Container","fixed","container","spacing","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newTask","copy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qTASaA,EAAcC,IAAMC,MAAK,SAACC,GACnC,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,oBAAkB,GAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAEAC,QAAQC,IAAI,eAEZ,IAAMC,EAAU,WACK,KAAjBN,EAAMO,OACAT,EAAMU,QAAQR,EAAMO,QACpBJ,GAAS,GACfF,EAAS,KAgBb,OACI,6BACI,kBAACQ,EAAA,EAAD,CAAWC,MAAQR,EAA8D,QAArDJ,EAAMa,UAAYb,EAAMa,UAAY,cACrDC,KAAK,QACLC,QAAQ,WACRX,MAAOA,EACPY,WAAYZ,EAAQ,oBAAsB,GAC1Ca,SApBG,SAACC,GACfA,EAAEC,cAAcC,OAChBf,GAAS,GAEbF,EAASe,EAAEC,cAAcC,QAiBVA,MAAOlB,EACPmB,WAfK,SAACH,GACP,UAAVA,EAAEI,KACFd,OAcA,kBAACe,EAAA,EAAD,CAAYC,aAAW,SAASC,QAASjB,EAASkB,MAAO,CAACC,MAAO,SAAUC,UAAW1B,GAClF,kBAAC2B,EAAA,EAAD,CAAQC,SAAS,e,gGClB3BC,EAA+B,GAWxBC,EAAyB,SAACC,EAA0BC,GAC7D,MAAO,CAACC,KAAM,yBAA0BF,SAAQC,e,QChCvCE,EAAetC,IAAMC,MAAK,YAAkD,IAAhDG,EAA+C,EAA/CA,MAAOmC,EAAwC,EAAxCA,YAC5C,EAAgCpC,oBAAkB,GAAlD,mBAAOqC,EAAP,KAAiBC,EAAjB,KACA,EAAkCtC,mBAAiBC,GAAnD,mBAAOsC,EAAP,KAAkBC,EAAlB,KAUMC,EAAc,WAChBH,GAAY,GACZF,EAAYG,IAShB,OACIF,EAEI,kBAAC3B,EAAA,EAAD,CAAWgC,OAAQD,EACZtB,MAAOoB,EACPnB,WAXS,SAACH,GACP,UAAVA,EAAEI,KACFoB,KAUOzB,SAzBO,SAACC,GACnBuB,EAAavB,EAAEC,cAAcC,QAyBlBwB,WAAS,EAChBlB,MAAO,CAACmB,MAAO,WAEb,0BAAMC,cAzBG,WACfP,GAAY,KAwB4BrC,M,yCCd1C6B,EAA+B,G,mCCbxBgB,EAAOjD,IAAMC,MAAK,YAA0C,IAAxCmC,EAAuC,EAAvCA,WAAYc,EAA2B,EAA3BA,OACrCC,EAAWC,cACTC,EAAOC,aAAqC,SAAAC,GAAK,OAAIA,EAAMC,MAAMpB,GAAYD,QAAO,SAAAsB,GAAC,OAAIA,EAAEC,KAAOR,KAAQ,MAE1GS,EAAiBC,uBAAY,kBAAMT,EDkBjB,SAACD,EAAgBW,GACzC,MAAO,CAACxB,KAAM,eAAgBa,SAAQW,cCnBYC,CAAaZ,EAAQd,MAAc,CAACc,EAAQd,IACxF2B,EAAqBH,uBAAY,SAACxC,GAAD,OAAsC+B,EDuB/C,SAACD,EAAgBW,EAAoBG,GACnE,MAAO,CAAC3B,KAAM,sBAAuBa,SAAQW,aAAYG,UCxB6BC,CAAmBf,EAAQd,EAAYhB,EAAEC,cAAc6C,YAAW,CAAChB,EAAQd,IAC3J+B,EAAcP,uBAAY,SAACxD,GAAD,OAAmB+C,EDyBtB,SAACD,EAAgBW,EAAoBO,GAClE,MAAO,CAAC/B,KAAM,qBAAsBa,SAAQW,aAAYO,YC1BIC,CAAkBnB,EAAQd,EAAYhC,MAAS,CAAC8C,EAAQd,IACpH,OACI,kBAACkC,EAAA,EAAD,CAAUC,UAAWlB,EAAKmB,OAAS,YAAc,GACvCC,gBAAc,EACd7C,MAAO,CAAC8C,QAAS,IAAKC,QAAS,OAAQC,eAAgB,gBAAiBC,SAAU,SAClFC,SAAO,EACPtD,IAAK0B,GAEX,kBAAC6B,EAAA,EAAD,CACIC,KAAK,QACLhE,KAAK,QACLkD,QAASb,EAAKmB,OACdrD,SAAU4C,IAEd,kBAACzB,EAAD,CAAclC,MAAOiD,EAAKjD,MACZmC,YAAa4B,IAC3B,kBAAC1C,EAAA,EAAD,CAAYT,KAAM,QAASW,QAASgC,EAAgBjC,aAAW,UAC3D,kBAAC,IAAD,WCrBHuD,EAAWjF,IAAMC,MAAK,YAA8B,IAA5BmC,EAA2B,EAA3BA,WAE3B8C,EAAW5B,aAAyC,SAAAC,GAAK,OAAIA,EAAM4B,UACpEhD,QAAO,SAAAiD,GAAI,OAAIA,EAAK1B,KAAOtB,KAAY,MACtCoB,EAAQF,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMpB,MACpEe,EAAWC,cAEXiC,EAAazB,uBAAY,SAACxD,GAC5B+C,EFeiB,SAACU,EAAoBzD,GAC1C,MAAO,CAACiC,KAAM,YAAawB,aAAYzD,SEhB1BkF,CAAUlD,EAAYhC,MAChC,CAAC+C,EAAUf,IAWRmD,EAAsB3B,uBAAY,SAACxD,GACrC+C,EJD6B,SAAC/C,EAAegC,GACjD,MAAO,CAACC,KAAM,wBAAyBjC,QAAOsD,GAAItB,GIArCoD,CAAsBpF,EAAOgC,MACvC,CAACA,IACAqD,EAAejC,EAQnB,MAPwB,WAApB0B,EAAS/C,SACTsD,EAAejC,EAAMrB,QAAO,SAAAsB,GAAC,OAAKA,EAAEe,WAEhB,cAApBU,EAAS/C,SACTsD,EAAejC,EAAMrB,QAAO,SAAAsB,GAAC,OAAIA,EAAEe,WAInC,yBAAKD,UAAU,YACX,kBAACmB,EAAA,EAAD,CAAYzE,QAAQ,KAAK0E,MAAM,UAC3B,kBAACrD,EAAD,CAAclC,MAAO8E,EAAS9E,MAAOmC,YAAagD,IAClD,kBAAC9D,EAAA,EAAD,CAAYC,aAAW,SAASC,QAAS,kBAAMwB,EJrB/B,SAACf,GAC7B,MAAO,CAACC,KAAM,kBAAmBqB,GAAItB,GIoB+BwD,CAAiBxD,MACrE,kBAACyD,EAAA,EAAD,CAAc7D,SAAU,aAGhC,kBAACjC,EAAD,CAAaa,QAASyE,EAAYtE,UAAW,qBAE5C0E,EAAaK,KAAI,SAAArC,GAAC,OAAI,kBAACR,EAAD,CAAMzB,IAAKiC,EAAEC,GACPR,OAAQO,EAAEC,GACVtB,WAAYA,OAGzC,yBAAKmC,UAAU,iBACX,kBAACwB,EAAA,EAAD,CAAQ9E,QAAQ,YACRD,KAAK,QACLa,MAA2B,QAApBqD,EAAS/C,OAAmB,UAAY,UAC/CR,QAxCL,WACXwB,EAASjB,EAAuB,MAAOE,MAoC/B,OAIA,kBAAC2D,EAAA,EAAD,CAAQ9E,QAAQ,YACRD,KAAK,QACLa,MAA2B,WAApBqD,EAAS/C,OAAsB,UAAY,UAClDR,QAtCF,WACdwB,EAASjB,EAAuB,SAAUE,MAkClC,UAIA,kBAAC2D,EAAA,EAAD,CAAQ9E,QAAQ,YACRD,KAAK,QACLa,MAA2B,cAApBqD,EAAS/C,OAAyB,UAAY,UACrDR,QA7CC,WACjBwB,EAASjB,EAAuB,YAAaE,MAyCrC,kBCDD4D,MA7Cf,WACI,IAAMC,EAAY3C,aAA2C,SAAAC,GAAK,OAAIA,EAAM4B,aACxEhC,EAAWC,cAET8C,EAActC,uBAAY,SAACxD,GAAmB+C,ELI3B,SAAC/C,GAC1B,MAAO,CAACiC,KAAM,eAAgBjC,QAAOgC,WAAY+D,eKLYC,CAAchG,MAAS,CAAC+C,IAE/EkD,EAAqBJ,EAAUH,KAAI,SAAAQ,GACrC,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAAChF,IAAK8E,EAAG5C,IACf,kBAAC+C,EAAA,EAAD,CAAOC,UAAW,EAAGnC,UAAU,SAC3B,kBAACU,EAAD,CAAUzD,IAAK8E,EAAG5C,GACCtB,WAAYkE,EAAG5C,UAOlD,OACI,yBAAKa,UAAU,OACX,kBAACoC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASjF,MAAO,CAACgD,eAAgB,kBAC7B,kBAACnD,EAAA,EAAD,CAAYuD,KAAK,QAAQnD,MAAM,UAAUH,aAAW,QAChD,kBAACoF,EAAA,EAAD,OAEJ,kBAACpB,EAAA,EAAD,CAAYzE,QAAQ,MAApB,aAGA,kBAAC8E,EAAA,EAAD,CAAQlE,MAAM,UAAUZ,QAAQ,YAAhC,WAKR,kBAAC8F,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACT,EAAA,EAAD,CAAMU,WAAS,EAACrF,MAAO,CAAC8C,QAAS,WAC7B,kBAAC3E,EAAD,CAAaa,QAASsF,EAAanF,UAAU,yBAEjD,kBAACwF,EAAA,EAAD,CAAMU,WAAS,EAACC,QAAS,GACpBb,MCnDDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdOC,EAAcC,YAAgB,CACvCtC,UPsC4B,WAAgF,IAA/E5B,EAA8E,uDAAtEtB,EAAcyF,EAAwD,uCAC3G,OAAQA,EAAOrF,MACX,IAAK,kBACD,OAAOkB,EAAMpB,QAAO,SAAAmE,GAAE,OAAIA,EAAG5C,KAAOgE,EAAOhE,MAE/C,IAAK,eACD,MAAM,GAAN,mBAAWH,GAAX,CAAkB,CAACG,GAAIgE,EAAOtF,WAAYhC,MAAOsH,EAAOtH,MAAO+B,OAAQ,SAE3E,IAAK,wBACD,OAAOoB,EAAMuC,KAAI,SAAAQ,GAAE,OAAIA,EAAG5C,KAAOgE,EAAOhE,GAAjB,2BAA0B4C,GAA1B,IAA8BlG,MAAOsH,EAAOtH,QAASkG,KAEhF,IAAK,yBACD,OAAO/C,EAAMuC,KAAI,SAAAQ,GAAE,OAAIA,EAAG5C,KAAOgE,EAAOtF,WAAjB,2BAAkCkE,GAAlC,IAAsCnE,OAAQuF,EAAOvF,SAAUmE,KAE1F,QACI,OAAO/C,IOpDfC,ML2CwB,WAAoE,IAAnED,EAAkE,uDAA1DtB,EAAcyF,EAA4C,uCAC3F,OAAQA,EAAOrF,MACX,IAAK,eACD,OAAO,2BAAIkB,GAAX,kBAAmBmE,EAAO7D,WAAaN,EAAMmE,EAAO7D,YAAY1B,QAAO,SAAAsB,GAAC,OAAIA,EAAEC,KAAOgE,EAAOxE,YAEhG,IAAK,YACD,IAAIyE,EAAoB,CAACjE,GAAIyC,cAAM/F,MAAOsH,EAAOtH,MAAOoE,QAAQ,GAChE,OAAO,2BAAIjB,GAAX,kBAAmBmE,EAAO7D,WAA1B,CAAwC8D,GAAxC,mBAAoDpE,EAAMmE,EAAO7D,gBAErE,IAAK,sBACD,OAAO,2BAAIN,GAAX,kBAAmBmE,EAAO7D,WAAaN,EAAMmE,EAAO7D,YAC3CiC,KAAI,SAAArC,GAAC,OAAIA,EAAEC,KAAOgE,EAAOxE,OAAhB,2BAA6BO,GAA7B,IAAgCe,OAAQkD,EAAO1D,SAAUP,OAE/E,IAAK,qBACD,OAAO,2BAAIF,GAAX,kBAAmBmE,EAAO7D,WAAaN,EAAMmE,EAAO7D,YAC3CiC,KAAI,SAAArC,GAAC,OAAIA,EAAEC,KAAOgE,EAAOxE,OAAhB,2BAA6BO,GAA7B,IAAgCrD,MAAOsH,EAAOtD,WAAYX,OAEhF,IAAK,eACD,OAAO,2BAAIF,GAAX,kBAAmBmE,EAAOtF,WAAa,KAE3C,IAAK,kBACD,qBAAqCmB,GAArC,EAAMmE,EAAOhE,GAAYkE,GAAzB,+CACA,OAAOA,EAEX,QACI,OAAOrE,MKlENsE,EAAQC,YAAYN,GCAjCO,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnI,GACLE,QAAQF,MAAMA,EAAMoI,c","file":"static/js/main.b75a6e8a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    initValue?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    console.log('AddItemForm')\r\n\r\n    const AddItem = () => {\r\n        title.trim() !== ''\r\n            ? props.addItem(title.trim())\r\n            : setError(true)\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value) {\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            AddItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField label={!error ? (props.initValue ? props.initValue : \"Enter title\") : \"Error\"}\r\n                       size=\"small\"\r\n                       variant=\"outlined\"\r\n                       error={error}\r\n                       helperText={error ? \"Title is required\" : \"\"}\r\n                       onChange={onChangeTitle}\r\n                       value={title}\r\n                       onKeyPress={onKeyPressEnter}/>\r\n            <IconButton aria-label=\"delete\" onClick={AddItem} style={{color: \"green\"}} disabled={!title}>\r\n                <AddBox fontSize=\"small\" />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodoListType} from \"../App\";\r\n\r\nexport type TodolistsReducerActionTypes = RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n\r\nexport type RemoveTodolistType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    todolistId: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: TodoListType[] = []\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistType => {\r\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistType => {\r\n    return {type: \"ADD-TODOLIST\", title, todolistId: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (title: string, todolistId: string): ChangeTodolistTitleType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title, id: todolistId}\r\n}\r\nexport const ChangeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter, todolistId}\r\n}\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodolistsReducerActionTypes): TodoListType[] => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, setNewTitle}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [spanTitle, setSpanTitle] = useState<string>(title)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSpanTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        setNewTitle(spanTitle)\r\n    }\r\n\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField onBlur={offEditMode}\r\n                   value={spanTitle}\r\n                   onKeyPress={onKeyPressEnter}\r\n                   onChange={onChangeTitle}\r\n                   autoFocus\r\n            style={{width: \"200px\"}}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{title}</span>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {AddTodolistType, RemoveTodolistType} from \"./todolistsReducer\";\r\nimport {TasksStateType, TaskType} from \"../App\";\r\n\r\nexport type removeTasksType = {\r\n    type: \"REMOVE-TASKS\"\r\n    taskId: string\r\n    todoListID: string\r\n}\r\nexport type addTasksType = {\r\n    type: \"ADD-TASKS\"\r\n    todoListID: string\r\n    title: string\r\n}\r\nexport type changeTasksStatusType = {\r\n    type: \"CHANGE-TASKS-STATUS\",\r\n    taskId: string\r\n    todoListID: string\r\n    status: boolean\r\n}\r\nexport type changeTasksTitleType = {\r\n    type: \"CHANGE-TASKS-TITLE\",\r\n    taskId: string\r\n    todoListID: string\r\n    newTitle: string\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\ntype TasksActionType = removeTasksType\r\n    | addTasksType\r\n    | changeTasksStatusType\r\n    | changeTasksTitleType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n\r\nexport const removeTaskAC = (taskId: string, todoListID: string): removeTasksType => {\r\n    return {type: \"REMOVE-TASKS\", taskId, todoListID} as const\r\n}\r\nexport const addTaskAC = (todoListID: string, title: string): addTasksType => {\r\n    return {type: \"ADD-TASKS\", todoListID, title} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, todoListID: string, status: boolean): changeTasksStatusType => {\r\n    return {type: \"CHANGE-TASKS-STATUS\", taskId, todoListID, status} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, todoListID: string, newTitle: string): changeTasksTitleType => {\r\n    return {type: \"CHANGE-TASKS-TITLE\", taskId, todoListID, newTitle} as const\r\n}\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASKS\": {\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case \"ADD-TASKS\": {\r\n            let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todoListID]: [newTask, ...state[action.todoListID]]}\r\n        }\r\n        case \"CHANGE-TASKS-STATUS\": {\r\n            return {...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskId ? {...t, isDone: action.status} : t)}\r\n        }\r\n        case \"CHANGE-TASKS-TITLE\": {\r\n            return {...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskId ? {...t, title: action.newTitle} : t)}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolistId]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let {[action.id]: [], ...copy} = {...state}\r\n            return copy\r\n        }\r\n        default:\r\n            return state\r\n        // throw new Error('i not understand this type')\r\n    }\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\"\r\nimport {EditableSpan} from \"../Components/EditableSpan/EditableSpan\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport {TaskType} from \"../App\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../state/tasksReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../state/store\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport const Task = React.memo(({todolistId, taskId}: TaskPropsType) => {\r\n    let dispatch = useDispatch()\r\n    const task = useSelector<RootStateType, TaskType>(state => state.tasks[todolistId].filter(t => t.id === taskId)[0])\r\n\r\n    const removeTaskById = useCallback(() => dispatch(removeTaskAC(taskId, todolistId)), [taskId, todolistId])\r\n    const onChangeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => dispatch(changeTaskStatusAC(taskId, todolistId, e.currentTarget.checked)), [taskId, todolistId])\r\n    const changeTitle = useCallback((title: string) => dispatch(changeTaskTitleAC(taskId, todolistId, title)), [taskId, todolistId])\r\n    return (\r\n        <ListItem className={task.isDone ? \"done-task\" : ''}\r\n                  disableGutters\r\n                  style={{padding: \"0\", display: \"flex\", justifyContent: \"space-between\", maxWidth: \"260px\"}}\r\n                  divider\r\n                  key={taskId}>\r\n\r\n            <Checkbox\r\n                edge=\"start\"\r\n                size=\"small\"\r\n                checked={task.isDone}\r\n                onChange={onChangeTaskStatus}\r\n            />\r\n            <EditableSpan title={task.title}\r\n                          setNewTitle={changeTitle}/>\r\n            <IconButton size={\"small\"} onClick={removeTaskById} aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import React, {useCallback} from \"react\";\r\nimport {TaskType, TodoListType} from \"../../App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Typography} from \"@material-ui/core\";\r\nimport {HighlightOff} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../state/store\";\r\nimport {addTaskAC} from \"../../state/tasksReducer\";\r\nimport {ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC} from \"../../state/todolistsReducer\";\r\nimport {Task} from \"../../Task/Task\";\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n}\r\n\r\nexport const TodoList = React.memo(({todolistId}: PropsType) => {\r\n\r\n    const todolist = useSelector<RootStateType, TodoListType>(state => state.todolists\r\n        .filter(todo => todo.id === todolistId)[0])\r\n    const tasks = useSelector<RootStateType, TaskType[]>(state => state.tasks[todolistId])\r\n    const dispatch = useDispatch()\r\n\r\n    const createTask = useCallback((title: string) => {\r\n        dispatch(addTaskAC(todolistId, title))\r\n    }, [dispatch, todolistId])\r\n    const setAll = () => {\r\n        dispatch(ChangeTodolistFilterAC('all', todolistId))\r\n    }\r\n    const setCompleted = () => {\r\n        dispatch(ChangeTodolistFilterAC('completed', todolistId))\r\n    }\r\n    const setActive = () => {\r\n        dispatch(ChangeTodolistFilterAC('active', todolistId))\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(ChangeTodolistTitleAC(title, todolistId))\r\n    }, [todolistId])\r\n    let filteredTask = tasks\r\n    if (todolist.filter === \"active\") {\r\n        filteredTask = tasks.filter(t => !t.isDone)\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        filteredTask = tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todolist\">\r\n            <Typography variant=\"h5\" align=\"center\">\r\n                <EditableSpan title={todolist.title} setNewTitle={changeTodoListTitle}/>\r\n                <IconButton aria-label=\"delete\" onClick={() => dispatch(RemoveTodolistAC(todolistId))}>\r\n                    <HighlightOff fontSize={\"medium\"}/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={createTask} initValue={\"Enter task title\"}/>\r\n\r\n            {filteredTask.map(t => <Task key={t.id}\r\n                                         taskId={t.id}\r\n                                         todolistId={todolistId}\r\n            />)}\r\n\r\n            <div className=\"filterButtons\">\r\n                <Button variant=\"contained\"\r\n                        size=\"small\"\r\n                        color={todolist.filter === 'all' ? \"primary\" : \"default\"}\r\n                        onClick={setAll}>All</Button>\r\n                <Button variant=\"contained\"\r\n                        size=\"small\"\r\n                        color={todolist.filter === 'active' ? \"primary\" : \"default\"}\r\n                        onClick={setActive}>Active</Button>\r\n                <Button variant=\"contained\"\r\n                        size=\"small\"\r\n                        color={todolist.filter === 'completed' ? \"primary\" : \"default\"}\r\n                        onClick={setCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {AddTodolistAC} from \"./state/todolistsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./state/store\";\r\nimport {TodoList} from \"./Components/TodoList/TodoList\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n    const todoLists = useSelector<RootStateType, TodoListType[]>(state => state.todolists)\r\n    let dispatch = useDispatch()\r\n\r\n    const addTodoList = useCallback((title: string) => {dispatch(AddTodolistAC(title))},[dispatch])\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3} className=\"paper\">\r\n                    <TodoList key={tl.id}\r\n                                       todolistId={tl.id}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant=\"outlined\">\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList} initValue=\"Enter todolist name\"/>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}